(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[72292],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return t?o.createElement(g,i(i({ref:n},c),{},{components:t})):o.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var p=2;p<l;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},93624:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return r},toc:function(){return s},default:function(){return c}});var o=t(22122),a=t(19756),l=(t(67294),t(3905)),i={title:"Multi-Cluster App Delivery"},r={unversionedId:"case-studies/multi-cluster",id:"case-studies/multi-cluster",isDocsHomePage:!1,title:"Multi-Cluster App Delivery",description:"KubeVela is by design a full functional Continuous Delivery (CD) platform with fine grained support for hybrid/multi-cloud/multi-cluster deployment.",source:"@site/docs/case-studies/multi-cluster.md",sourceDirName:"case-studies",slug:"/case-studies/multi-cluster",permalink:"/docs/next/case-studies/multi-cluster",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/case-studies/multi-cluster.md",version:"current",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1649409805,formattedLastUpdatedAt:"4/8/2022",frontMatter:{title:"Multi-Cluster App Delivery"},sidebar:"docs",previous:{title:"Deploy First Application",permalink:"/docs/next/end-user/quick-start-cli"},next:{title:"Jenkins CI Integration",permalink:"/docs/next/case-studies/jenkins-cicd"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Preparation",id:"preparation",children:[]},{value:"Deliver Application to Clusters",id:"deliver-application-to-clusters",children:[{value:"Debugging Multi-cluster Application",id:"debugging-multi-cluster-application",children:[]}]},{value:"Advanced Usage",id:"advanced-usage",children:[{value:"Configure the deploy destination",id:"configure-the-deploy-destination",children:[]},{value:"Control the deploy workflow",id:"control-the-deploy-workflow",children:[]},{value:"Override default configurations in clusters",id:"override-default-configurations-in-clusters",children:[]},{value:"Use policies and workflow outside the application",id:"use-policies-and-workflow-outside-the-application",children:[]}]},{value:"Backward Compatibility",id:"backward-compatibility",children:[]},{value:"Conclusion",id:"conclusion",children:[]},{value:"Next Step",id:"next-step",children:[]}],p={toc:s};function c(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"KubeVela is by design a full functional Continuous Delivery (CD) platform with fine grained support for hybrid/multi-cloud/multi-cluster deployment.\nThis section will introduce how to deliver multi-cluster application with KubeVela policies and workflow."),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"There are many scenarios that developers or system operators need to deploy and manage applications across multiple clusters."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For scalability, a single Kubernetes cluster has its limit around 5K nodes or less, it is unable to handle the large scale application load."),(0,l.kt)("li",{parentName:"ul"},"For stability/availability, one single application can be deployed in multiple clusters for backup, which provides more stability and availability."),(0,l.kt)("li",{parentName:"ul"},"For security, application might need to be deployed in different zones/areas as government policy requires.")),(0,l.kt)("p",null,"The following guide will introduce how to manage applications across clusters on KubeVela."),(0,l.kt)("h2",{id:"preparation"},"Preparation"),(0,l.kt)("p",null,"You can simply join an existing cluster into KubeVela by specifying its KubeConfig as below"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"vela cluster join <your kubeconfig path>\n")),(0,l.kt)("p",null,"It will use the field ",(0,l.kt)("inlineCode",{parentName:"p"},"context.cluster")," in KubeConfig as the cluster name automatically,\nyou can also specify the name by ",(0,l.kt)("inlineCode",{parentName:"p"},"--name")," parameter. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela cluster join beijing.kubeconfig --name beijing\n$ vela cluster join hangzhou-1.kubeconfig --name hangzhou-1\n$ vela cluster join hangzhou-2.kubeconfig --name hangzhou-2\n")),(0,l.kt)("p",null,"After clusters joined, you could list all clusters managed by KubeVela."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela cluster list\nCLUSTER                 TYPE            ENDPOINT                ACCEPTED        LABELS\nlocal                   Internal        -                       true                  \ncluster-beijing         X509Certificate <ENDPOINT_BEIJING>      true                  \ncluster-hangzhou-1      X509Certificate <ENDPOINT_HANGZHOU_1>   true                  \ncluster-hangzhou-2      X509Certificate <ENDPOINT_HANGZHOU_2>   true                  \n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"By default, the hub cluster where KubeVela locates is registered as the ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," cluster. You can use it like a managed cluster in spite that you cannot detach it or modify it.")),(0,l.kt)("p",null,"You can also detach a cluster if you do not want to use it anymore."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"$ vela cluster detach beijing\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"It is dangerous to detach a cluster that is still in-use. But if you want to do modifications to the held cluster credential, like rotating certificates, it is possible to do so. ")),(0,l.kt)("p",null,"You can also give labels to your clusters, which helps you select clusters for deploying applications."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela cluster labels add cluster-hangzhou-1 region=hangzhou\n$ vela cluster labels add cluster-hangzhou-2 region=hangzhou\n$ vela cluster list\nCLUSTER                 TYPE            ENDPOINT                ACCEPTED        LABELS\nlocal                   Internal        -                       true                  \ncluster-beijing         X509Certificate <ENDPOINT_BEIJING>      true                  \ncluster-hangzhou-1      X509Certificate <ENDPOINT_HANGZHOU_1>   true            region=hangzhou\ncluster-hangzhou-2      X509Certificate <ENDPOINT_HANGZHOU_2>   true            region=hangzhou\n")),(0,l.kt)("h2",{id:"deliver-application-to-clusters"},"Deliver Application to Clusters"),(0,l.kt)("p",null,"To deliver your application into multiple clusters, you simply need to configure which clusters you want to deploy through the ",(0,l.kt)("inlineCode",{parentName:"p"},"topology")," policy. For example, you can deploy an nginx webservice in hangzhou clusters by running the following commands"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat <<EOF | vela up -f -\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: basic-topology\n  namespace: examples\nspec:\n  components:\n    - name: nginx-basic\n      type: webservice\n      properties:\n        image: nginx\n      traits:\n        - type: expose\n          properties:\n            port: [80]\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusters: ["cluster-hangzhou-1", "cluster-hangzhou-2"]\nEOF\n')),(0,l.kt)("p",null,"You can check the deploy result by running ",(0,l.kt)("inlineCode",{parentName:"p"},"vela status")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela status basic-topology -n examples\nAbout:\n\n  Name:         basic-topology               \n  Namespace:    examples                     \n  Created at:   2022-04-08 14:37:54 +0800 CST\n  Status:       workflowFinished             \n\nWorkflow:\n\n  mode: DAG\n  finished: true\n  Suspend: false\n  Terminated: false\n  Steps\n  - id:3mvz5i8elj\n    name:deploy-topology-hangzhou-clusters\n    type:deploy\n    phase:succeeded \n    message:\n\nServices:\n\n  - Name: nginx-basic  \n    Cluster: cluster-hangzhou-1  Namespace: examples\n    Type: webservice\n    Healthy Ready:1/1\n    Traits:\n      \u2705 expose\n  - Name: nginx-basic  \n    Cluster: cluster-hangzhou-2  Namespace: examples\n    Type: webservice\n    Healthy Ready:1/1\n    Traits:\n      \u2705 expose\n")),(0,l.kt)("h3",{id:"debugging-multi-cluster-application"},"Debugging Multi-cluster Application"),(0,l.kt)("p",null,"You can debugging the above deployed nginx webservice by running the following vela CLI commands. You can play with your pods in managed clusters directly on the hub cluster, without switching KubeConfig context. If you have multiple clusters in on application, the CLI command will ask you to choose one interactively."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vela status")," as shown above can give you an overview of your deployed multi-cluster application. Example usage is shown above."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vela logs")," shows pod logs in managed clusters.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela logs basic-topology -n examples \n? You have 2 deployed resources in your app. Please choose one: Cluster: cluster-hangzhou-1 | Namespace: examples | Kind: Deployment | Name: nginx-basic\n+ nginx-basic-dfb6dcf8d-km5vk \u203a nginx-basic\nnginx-basic-dfb6dcf8d-km5vk nginx-basic 2022-04-08T06:38:10.540430392Z /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\nnginx-basic-dfb6dcf8d-km5vk nginx-basic 2022-04-08T06:38:10.540742240Z /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vela port-forward")," forward ports of pods or services in managed clusters to your local endpoint.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela exec basic-topology -n examples -it -- ls \n? You have 2 deployed resources in your app. Please choose one: Cluster: cluster-hangzhou-1 | Namespace: examples | Kind: Deployment | Name: nginx-basic\nbin   docker-entrypoint.d   home   media  proc  sbin  tmp\nboot  docker-entrypoint.sh  lib    mnt    root  srv   usr\ndev   etc                   lib64  opt    run   sys   var\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vela exec")," helps you execute commands in pods in managed clusters.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela port-forward basic-topology -n examples 8080:80\n? You have 4 deployed resources in your app. Please choose one: Cluster: cluster-hangzhou-1 | Namespace: examples | Kind: Deployment | Name: nginx-basic\nForwarding from 127.0.0.1:8080 -> 80\nForwarding from [::1]:8080 -> 80\n\nForward successfully! Opening browser ...\nHandling connection for 8080\n")),(0,l.kt)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,l.kt)("h3",{id:"configure-the-deploy-destination"},"Configure the deploy destination"),(0,l.kt)("p",null,"The most straightforward way to configure the deploy destination is to write cluster names inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"topology")," policy. Sometimes, it will be more easy to select clusters by labels, like filtering all clusters in hangzhou:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: label-selector-topology\n  namespace: examples\nspec:\n  components:\n    - name: nginx-label-selector\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n")),(0,l.kt)("p",null,"If you want to deploy application components into the control plane cluster, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," cluster.\nBesides, you can also deploy your application components in another namespace other than the application's original namespace."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: local-ns-topology\n  namespace: examples\nspec:\n  components:\n    - name: nginx-local-ns\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Sometimes, for security issues, you might want to disable this behavior and retrict the resources to be deployed within the same namespace of the application. This can be done by setting ",(0,l.kt)("inlineCode",{parentName:"p"},"--allow-cross-namespace-resource=false")," in the bootstrap parameter of the KubeVela controller.")),(0,l.kt)("h3",{id:"control-the-deploy-workflow"},"Control the deploy workflow"),(0,l.kt)("p",null,"By default, if you declare multiple topology policies in the application, the application components will be deployed in all destinations following the order of the policies."),(0,l.kt)("p",null,"If you want to control the deploy process, like changing the order or adding manual approval, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"deploy")," workflow step explicitly in the workflow to achieve that."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: deploy-workflowstep\n  namespace: examples\nspec:\n  components:\n    - name: nginx-deploy-workflowstep\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n  workflow:\n    steps:\n      - type: deploy\n        name: deploy-local\n        properties:\n          policies: ["topology-local"]\n      - type: deploy\n        name: deploy-hangzhou\n        properties:\n          # require manual approval before running this step\n          auto: false\n          policies: ["topology-hangzhou-clusters"]\n')),(0,l.kt)("p",null,"You can also deploy application components with different topology policies concurrently, by filling these topology policies in one ",(0,l.kt)("inlineCode",{parentName:"p"},"deploy")," step."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: deploy-concurrently\n  namespace: examples\nspec:\n  components:\n    - name: nginx-deploy-concurrently\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n  workflow:\n    steps:\n      - type: deploy\n        name: deploy-all\n        properties:\n          policies: ["topology-local", "topology-hangzhou-clusters"]\n')),(0,l.kt)("h3",{id:"override-default-configurations-in-clusters"},"Override default configurations in clusters"),(0,l.kt)("p",null,"There are times that you want to make changes to the configuration in some clusters, rather than use the default configuration declared in the application's components field. For example, using a different container image or changing the default number of replicas."),(0,l.kt)("p",null,"The override policy is able to help you make customizations in different clusters. You can use it together with the topology policy in the ",(0,l.kt)("inlineCode",{parentName:"p"},"deploy")," workflow step."),(0,l.kt)("p",null,"In the following example, the application will deploy a default nginx webservice in the ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," cluster. Then it will deploy a high-available nginx webservice with the legacy image ",(0,l.kt)("inlineCode",{parentName:"p"},"nginx:1.20")," and 3 replicas in hangzhou clusters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: deploy-with-override\n  namespace: examples\nspec:\n  components:\n    - name: nginx-with-override\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n    - name: override-nginx-legacy-image\n      type: override\n      properties:\n        components:\n          - name: nginx-with-override\n            properties:\n              image: nginx:1.20\n    - name: override-high-availability\n      type: override\n      properties:\n        components:\n          - type: webservice\n            traits:\n              - type: scaler\n                properties:\n                  replicas: 3\n  workflow:\n    steps:\n      - type: deploy\n        name: deploy-local\n        properties:\n          policies: ["topology-local"]\n      - type: deploy\n        name: deploy-hangzhou\n        properties:\n          policies: ["topology-hangzhou-clusters", "override-nginx-legacy-image", "override-high-availability"]\n')),(0,l.kt)("p",null,"The override policy has many advanced capabilities, such as adding new component or selecting components to use.\nThe following example will first deploy an nginx webservice with ",(0,l.kt)("inlineCode",{parentName:"p"},"nginx:1.20")," image to local cluster. Then two nginx webservices with ",(0,l.kt)("inlineCode",{parentName:"p"},"nginx")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"nginx:stable")," images will be deployed to hangzhou clusters respectively."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: advance-override\n  namespace: examples\nspec:\n  components:\n    - name: nginx-advance-override-legacy\n      type: webservice\n      properties:\n        image: nginx:1.20\n    - name: nginx-advance-override-latest\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n    - name: override-nginx-legacy\n      type: override\n      properties:\n        selector: ["nginx-advance-override-legacy"]\n    - name: override-nginx-latest\n      type: override\n      properties:\n        selector: ["nginx-advance-override-latest", "nginx-advance-override-stable"]\n        components:\n          - name: nginx-advance-override-stable\n            type: webservice\n            properties:\n              image: nginx:stable\n  workflow:\n    steps:\n      - type: deploy\n        name: deploy-local\n        properties:\n          policies: ["topology-local", "override-nginx-legacy"]\n      - type: deploy\n        name: deploy-hangzhou\n        properties:\n          policies: ["topology-hangzhou-clusters", "override-nginx-latest"]\n')),(0,l.kt)("h3",{id:"use-policies-and-workflow-outside-the-application"},"Use policies and workflow outside the application"),(0,l.kt)("p",null,"Sometimes, you may want to use the same policy across multiple applications or reuse previous workflow to deploy different resources.\nTo reduce the repeated code, you can leverage the external policies and workflow and refer to them in your applications."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: you can only refer to Policy and Workflow within your application's namespace.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1alpha1\nkind: Policy\nmetadata:\n  name: topology-hangzhou-clusters\n  namespace: examples\ntype: topology\nproperties:\n  clusterLabelSelector:\n    region: hangzhou\n---\napiVersion: core.oam.dev/v1alpha1\nkind: Policy\nmetadata:\n  name: override-high-availability-webservice\n  namespace: examples\ntype: override\nproperties:\n  components:\n    - type: webservice\n      traits:\n        - type: scaler\n          properties:\n            replicas: 3\n---\napiVersion: core.oam.dev/v1alpha1\nkind: Workflow\nmetadata:\n  name: make-release-in-hangzhou\n  namespace: examples\nsteps:\n  - type: deploy\n    name: deploy-hangzhou\n    properties:\n      auto: false\n      policies: ["override-high-availability-webservice", "topology-hangzhou-clusters"]\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: external-policies-and-workflow\n  namespace: examples\nspec:\n  components:\n    - name: nginx-external-policies-and-workflow\n      type: webservice\n      properties:\n        image: nginx\n  workflow:\n    ref: make-release-in-hangzhou\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"NOTE: The internal policies will be loaded first. External policies will only be used when there is no corresponding policy inside the application. In the following example, we can reuse ",(0,l.kt)("inlineCode",{parentName:"p"},"topology-hangzhou-clusters")," policy and ",(0,l.kt)("inlineCode",{parentName:"p"},"make-release-in-hangzhou")," workflow but modify the ",(0,l.kt)("inlineCode",{parentName:"p"},"override-high-availability-webservice")," policy by injecting the same-named policy inside the new application.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: nginx-stable-ultra\n  namespace: examples\nspec:\n  components:\n    - name: nginx-stable-ultra\n      type: webservice\n      properties:\n        image: nginx:stable\n  policies:\n    - name: override-high-availability-webservice\n      type: override\n      properties:\n        components:\n          - type: webservice\n            traits:\n              - type: scaler\n                properties:\n                  replicas: 5\n  workflow:\n    ref: make-release-in-hangzhou\n")),(0,l.kt)("h2",{id:"backward-compatibility"},"Backward Compatibility"),(0,l.kt)("p",null,"KubeVela Application v1.3 uses different policies and workflow steps to configure and managing multi-cluster applications."),(0,l.kt)("p",null,"The outdated ",(0,l.kt)("inlineCode",{parentName:"p"},"env-binding")," policy and ",(0,l.kt)("inlineCode",{parentName:"p"},"deploy2env")," workflow step in old versions are kept now and might be deprecated in the future."),(0,l.kt)("p",null,"The new policies and workflow steps can cover all the use-cases in old versions so it is possible to upgrade all your applications while maintaining the same capabilities. Upgrade tools are not available now but will come out before deprecation happens."),(0,l.kt)("p",null,"If you already have applications running in production environment and do not want to change them, KubeVela v1.3 is also compatible for it. It is ",(0,l.kt)("strong",{parentName:"p"},"NOT")," necessary to migrate old multi-cluster applications to new ones."),(0,l.kt)("h2",{id:"conclusion"},"Conclusion"),(0,l.kt)("p",null,"In this section, we introduced how KubeVela delivering micro services in multiple clusters, the whole process can be easily modeled as a declarative deployment plan."),(0,l.kt)("p",null,"No more add-hoc scripts or glue code, KubeVela will get the application delivery workflow done with full automation and determinism. Most importantly, KubeVela expects you keep using the CI solutions you are already familiar with and KubeVela is fully complementary to them as the CD control plane."),(0,l.kt)("h2",{id:"next-step"},"Next Step"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For using KubeVela with your own CI pipelines and other tools, please check ",(0,l.kt)("a",{parentName:"li",href:"./jenkins-cicd"},"Jenkins CI Integration")," for more real world examples.")))}c.isMDXComponent=!0}}]);