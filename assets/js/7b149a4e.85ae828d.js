(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[48499],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(k,i(i({ref:t},l),{},{components:n})):r.createElement(k,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85595:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return l}});var r=n(22122),o=n(19756),a=(n(67294),n(3905)),i={title:"Pull based Component"},p={unversionedId:"end-user/components/kustomize",id:"version-v1.3/end-user/components/kustomize",isDocsHomePage:!1,title:"Pull based Component",description:"Create a Kustomize Component, it could be from Git Repo or OSS bucket or image registry.",source:"@site/versioned_docs/version-v1.3/end-user/components/kustomize.md",sourceDirName:"end-user/components",slug:"/end-user/components/kustomize",permalink:"/docs/end-user/components/kustomize",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/end-user/components/kustomize.md",version:"v1.3",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1649421307,formattedLastUpdatedAt:"4/8/2022",frontMatter:{title:"Pull based Component"},sidebar:"version-v1.3/docs",previous:{title:"Deploy Kubernetes Objects",permalink:"/docs/end-user/components/cue/raw"},next:{title:"Needs More Component\uff1f",permalink:"/docs/end-user/components/more"}},c=[{value:"Watch Files",id:"watch-files",children:[{value:"Deploy From OSS bucket",id:"deploy-from-oss-bucket",children:[]},{value:"Deploy From Git Repo",id:"deploy-from-git-repo",children:[]}]},{value:"Watch Image Registry",id:"watch-image-registry",children:[]}],s={toc:c};function l(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create a Kustomize Component, it could be from Git Repo or OSS bucket or image registry."),(0,a.kt)("h2",{id:"watch-files"},"Watch Files"),(0,a.kt)("h3",{id:"deploy-from-oss-bucket"},"Deploy From OSS bucket"),(0,a.kt)("p",null,"KubeVela's ",(0,a.kt)("inlineCode",{parentName:"p"},"kustomize")," component meets the needs of users to directly connect Yaml files and folders as component products. No matter whether your Yaml file/folder is stored in a Git Repo or an OSS bucket, KubeVela can read and deliver it."),(0,a.kt)("p",null,"Let's take the YAML folder component from the OSS bucket registry as an example to explain the usage. In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Application")," this time, I hope to deliver a component named bucket-comp. The deployment file corresponding to the component is stored in the cloud storage OSS bucket, and the corresponding bucket name is definition-registry. ",(0,a.kt)("inlineCode",{parentName:"p"},"kustomize.yaml")," comes from this address of ",(0,a.kt)("inlineCode",{parentName:"p"},"oss-cn-beijing.aliyuncs.com")," and the path is ",(0,a.kt)("inlineCode",{parentName:"p"},"./app/prod/"),"."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"(Optional) If your OSS bucket needs identity verification, create a Secret:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl create secret generic bucket-secret --from-literal=accesskey=<your-ak> --from-literal=secretkey=<your-sk>\nsecret/bucket-secret created\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Deploy it:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cat <<EOF | vela up -f -\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: bucket-app\nspec:\n  components:\n    - name: bucket-comp\n      type: kustomize\n      properties:\n        repoType: oss\n        # If the bucket is private, you will need to provide\n        secretRef: bucket-secret\n        url: oss-cn-beijing.aliyuncs.com\n        oss:\n          bucketName: definition-registry\n        path: ./app/prod/\nEOF\n")),(0,a.kt)("p",null,"Please copy the above code block and deploy it directly to the runtime cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"application.core.oam.dev/bucket-app created\n")),(0,a.kt)("p",null,"Finally, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"vela ls")," to view the application status after successful delivery:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"vela ls\nAPP                     COMPONENT   TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \nbucket-app              bucket-comp kustomize           running healthy         2021-08-28 18:53:14 +0800 CST\n")),(0,a.kt)("p",null,"The PHASE of the app is running, and the STATUS is healthy. Successful application deployment!"),(0,a.kt)("h3",{id:"deploy-from-git-repo"},"Deploy From Git Repo"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"How-to")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: git-app\nspec:\n  components:\n    - name: git-comp\n      type: kustomize\n      properties:\n        repoType: git\n        url: https://github.com/<path>/<to>/<repo>\n        git:\n          branch: master\n          provider: GitHub\n        path: ./app/dev/\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Override Kustomize")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: bucket-app\nspec:\n  components:\n    - name: bucket-comp\n      type: kustomize\n      properties:\n        # ...omitted for brevity\n        path: ./app/\n     \n")),(0,a.kt)("h2",{id:"watch-image-registry"},"Watch Image Registry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: image-app\nspec:\n  components:\n    - name: image\n      type: kustomize\n      properties:\n        imageRepository:\n          image: <your image>\n          secretRef: imagesecret\n          filterTags:\n            pattern: '^master-[a-f0-9]+-(?P<ts>[0-9]+)'\n            extract: '$ts'\n          policy:\n            numerical:\n              order: asc\n          commitMessage: \"Image: {{range .Updated.Images}}{{println .}}{{end}}\"\n")))}l.isMDXComponent=!0}}]);