(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[32951],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return i},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},i=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(g,l(l({ref:n},i),{},{components:t})):r.createElement(g,l({ref:n},i))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80429:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return i}});var r=t(22122),a=t(19756),o=(t(67294),t(3905)),l={title:"Garbage Collect"},p={unversionedId:"end-user/policies/gc",id:"end-user/policies/gc",isDocsHomePage:!1,title:"Garbage Collect",description:"By default, KubeVela Application will recycle outdated resources when new version is deployed and confirmed to be healthy. In some cases, you may want to have more customized control to the recycle of outdated resources, where you can leverage the garbage-collect policy.",source:"@site/docs/end-user/policies/gc.md",sourceDirName:"end-user/policies",slug:"/end-user/policies/gc",permalink:"/docs/next/end-user/policies/gc",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/end-user/policies/gc.md",version:"current",lastUpdatedBy:"Somefive",lastUpdatedAt:1649253195,formattedLastUpdatedAt:"4/6/2022",frontMatter:{title:"Garbage Collect"},sidebar:"docs",previous:{title:"Allow Configuration Drift",permalink:"/docs/next/end-user/policies/apply-once"},next:{title:"Dependency and Data Passing",permalink:"/docs/next/end-user/workflow/component-dependency-parameter"}},s=[{value:"Keep legacy resources",id:"keep-legacy-resources",children:[]},{value:"Persist resources",id:"persist-resources",children:[]}],c={toc:s};function i(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"By default, KubeVela Application will recycle outdated resources when new version is deployed and confirmed to be healthy. In some cases, you may want to have more customized control to the recycle of outdated resources, where you can leverage the garbage-collect policy."),(0,o.kt)("p",null,"In garbage-collect policy, there are two major capabilities you can use."),(0,o.kt)("h2",{id:"keep-legacy-resources"},"Keep legacy resources"),(0,o.kt)("p",null,"Suppose you want to keep the resources created by the old version of the application. Use the garbage-collect policy and enable the option ",(0,o.kt)("inlineCode",{parentName:"p"},"keepLegacyResource"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# app.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: first-vela-app\nspec:\n  components:\n    - name: express-server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: ingress-1-20\n          properties:\n            domain: testsvc.example.com\n            http:\n              "/": 8000\n  policies:\n    - name: keep-legacy-resource\n      type: garbage-collect\n      properties:\n        keepLegacyResource: true\n')),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"create app")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"vela up -f app.yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela ls\nAPP             COMPONENT       TYPE            TRAITS          PHASE   HEALTHY STATUS          CREATED-TIME                 \nfirst-vela-app  express-server  webservice      ingress-1-20    running healthy Ready:1/1       2022-04-06 16:20:25 +0800 CST\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"update the app")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# app1.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: first-vela-app\nspec:\n  components:\n    - name: express-server-1\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: ingress-1-20\n          properties:\n            domain: testsvc.example.com\n            http:\n              "/": 8000\n  policies:\n    - name: keep-legacy-resource\n      type: garbage-collect\n      properties:\n        keepLegacyResource: true\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"vela up -f app1.yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela ls\nAPP             COMPONENT               TYPE            TRAITS          PHASE   HEALTHY STATUS          CREATED-TIME                 \nfirst-vela-app  express-server-1        webservice      ingress-1-20    running healthy Ready:1/1       2022-04-06 16:20:25 +0800 CST\n")),(0,o.kt)("p",null,"check whether legacy resources are reserved."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In the following steps, we'll use ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," command to do some verification. You can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"vela status first-vela-app")," to check the aggregated application status and see if components are healthy.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ kubectl get deploy\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nexpress-server     1/1     1            1           10m\nexpress-server-1   1/1     1            1           40s\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ kubectl get svc\nNAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nexpress-server     ClusterIP   10.96.102.249   <none>        8000/TCP   10m\nexpress-server-1   ClusterIP   10.96.146.10    <none>        8000/TCP   46s\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ kubectl get ingress\nNAME               CLASS    HOSTS                 ADDRESS   PORTS   AGE\nexpress-server     <none>   testsvc.example.com             80      10m\nexpress-server-1   <none>   testsvc.example.com             80      50s\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ kubectl get resourcetracker\nNAME                        AGE\nfirst-vela-app-default      12m\nfirst-vela-app-v1-default   12m\nfirst-vela-app-v2-default   2m56s\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"delete the app")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ vela delete first-vela-app\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you hope to delete resources in one specified version, you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl delete resourcetracker first-vela-app-v1-default"),". ")),(0,o.kt)("h2",{id:"persist-resources"},"Persist resources"),(0,o.kt)("p",null,"You can also persist some resources, which skips the normal garbage-collect process when the application is updated."),(0,o.kt)("p",null,"Take the following app as an example, in the garbage-collect policy, a rule is added which marks all the resources created by the ",(0,o.kt)("inlineCode",{parentName:"p"},"expose")," trait to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"onAppDelete")," strategy. This will keep those services until application is deleted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cat <<EOF | vela up -f -\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: garbage-collect-app\nspec:\n  components:\n    - name: hello-world\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n      traits:\n        - type: expose\n          properties:\n            port: [8000]\n  policies:\n    - name: garbage-collect\n      type: garbage-collect\n      properties:\n        rules:\n          - selector:\n              traitTypes:\n                - expose\n            strategy: onAppDelete\nEOF\n")),(0,o.kt)("p",null,"You can find deployment and service created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deployment\nNAME          READY   UP-TO-DATE   AVAILABLE   AGE\nhello-world   1/1     1            1           74s\n$ kubectl get service   \nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nhello-world   ClusterIP   10.96.160.208   <none>        8000/TCP   78s\n")),(0,o.kt)("p",null,"If you upgrade the application and use a different component, you will find the old versioned deployment is deleted but the service is kept."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cat <<EOF | vela up -f -\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: garbage-collect-app\nspec:\n  components:\n    - name: hello-world-new\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n      traits:\n        - type: expose\n          properties:\n            port: [8000]\n  policies:\n    - name: garbage-collect\n      type: garbage-collect\n      properties:\n        rules:\n          - selector:\n              traitTypes:\n                - expose\n            strategy: onAppDelete\nEOF\n\n$ kubectl get deployment\nNAME              READY   UP-TO-DATE   AVAILABLE   AGE\nhello-world-new   1/1     1            1           10s\n$ kubectl get service   \nNAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nhello-world       ClusterIP   10.96.160.208   <none>        8000/TCP   5m56s\nhello-world-new   ClusterIP   10.96.20.4      <none>        8000/TCP   13s\n")),(0,o.kt)("p",null,"If you want to deploy job-like components, in which cases the resources in the component are not expected to be recycled even after the application is deleted, you can use the component type selector and set strategy to ",(0,o.kt)("inlineCode",{parentName:"p"},"never")," as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: garbage-collect-app\nspec:\n  components:\n    - name: hello-world-new\n      type: job-like-component\n  policies:\n    - name: garbage-collect\n      type: garbage-collect\n      properties:\n        rules:\n          - selector:\n              componentTypes:\n                - webservice\n            strategy: never\n")),(0,o.kt)("p",null,"An alternative selector for the component resources is the component name selector."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: create-ns-app\nspec:\n  components:\n    - name: example-addon-namespace\n      type: k8s-objects\n      properties:\n        objects:\n          - apiVersion: v1\n            kind: Namespace\n  policies:\n    - name: garbage-collect\n      type: garbage-collect\n      properties:\n        rules:\n          - selector:\n              componentNames:\n                - example-addon-namespace\n            strategy: never\n")))}i.isMDXComponent=!0}}]);