(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[36505],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return u}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),u=o,v=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return t?a.createElement(v,r(r({ref:n},c),{},{components:t})):a.createElement(v,r({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,r[1]=p;for(var l=2;l<i;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},12436:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var a=t(22122),o=t(19756),i=(t(67294),t(3905)),r={title:"Revisioning"},p={unversionedId:"end-user/version-control",id:"end-user/version-control",isDocsHomePage:!1,title:"Revisioning",description:"Component Revision",source:"@site/docs/end-user/version-control.md",sourceDirName:"end-user",slug:"/end-user/version-control",permalink:"/docs/next/end-user/version-control",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/end-user/version-control.md",version:"current",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1641994039,formattedLastUpdatedAt:"1/12/2022",frontMatter:{title:"Revisioning"},sidebar:"docs",previous:{title:"Notification",permalink:"/docs/next/end-user/workflow/webhook-notification"},next:{title:"Install Addon",permalink:"/docs/next/how-to/cli/addon/addon"}},s=[{value:"Component Revision",id:"component-revision",children:[]},{value:"Application Revision",id:"application-revision",children:[]},{value:"Live-Diff the <code>Application</code>",id:"live-diff-the-application",children:[]}],l={toc:s};function c(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"component-revision"},"Component Revision"),(0,i.kt)("p",null,"You can specify a generated component instance revision with field ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.components[*].externalRevision")," in Application like below: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: myapp\nspec:\n  components:\n    - name: express-server\n      type: webservice\n      externalRevision: express-server-v1\n      properties:\n        image: stefanprodan/podinfo:4.0.3\n")),(0,i.kt)("p",null,"If the field is not specified, it will generated by the name rule ",(0,i.kt)("inlineCode",{parentName:"p"},"<component-name>-<revision-number>"),"."),(0,i.kt)("p",null,"After the Application created, it will generate a ControllerRevision object for each component."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get the revision for component instance")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get controllerrevision -l controller.oam.dev/component=express-server\nNAME                CONTROLLER                       REVISION   AGE\nexpress-server-v1   application.core.oam.dev/myapp   1          2m40s\nexpress-server-v2   application.core.oam.dev/myapp   2          2m12s\n")),(0,i.kt)("p",null,"You can specify the component revision for ",(0,i.kt)("a",{parentName:"p",href:"./traits/rollout"},"component rolling update"),"."),(0,i.kt)("h2",{id:"application-revision"},"Application Revision"),(0,i.kt)("p",null,"When updating an application entity except workflow, KubeVela will create a new revision as a snapshot for this change."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get apprev -l app.oam.dev/name=myapp\nNAME       AGE\nmyapp-v1   54m\nmyapp-v2   53m\nmyapp-v3   18s\n")),(0,i.kt)("p",null,"You can get all the information related with the application in the application revision, including the application spec,\nand all related definitions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: ApplicationRevision\nmetadata:\n  labels:\n    app.oam.dev/app-revision-hash: a74b4a514ba2fc08\n    app.oam.dev/name: myapp\n  name: myapp-v3\n  namespace: default\n  ...\nspec:\n  application:\n    apiVersion: core.oam.dev/v1beta1\n    kind: Application\n    metadata:\n      name: myapp\n      namespace: default\n      ...\n    spec:\n      components:\n      - name: express-server\n        properties:\n          image: stefanprodan/podinfo:5.0.3\n        type: webservice@v1\n     ...\n  componentDefinitions:\n    webservice:\n      apiVersion: core.oam.dev/v1beta1\n      kind: ComponentDefinition\n      metadata:\n        name: webservice\n        namespace: vela-system\n        ...\n      spec:\n        schematic:\n          cue:\n            ...\n  traitDefinitions:\n    ...\n")),(0,i.kt)("h2",{id:"live-diff-the-application"},"Live-Diff the ",(0,i.kt)("inlineCode",{parentName:"h2"},"Application")),(0,i.kt)("p",null,"Live-diff helps you to have a preview of what would change if you're going to upgrade an application without making any changes\nto the living cluster.\nThis feature is extremely useful for serious production deployment, and make the upgrade under control"),(0,i.kt)("p",null,"It basically generates a diff between the specific revision of running instance and the local candidate application.\nThe result shows the changes (added/modified/removed/no_change) of the application as well as its sub-resources,\nsuch as components and traits."),(0,i.kt)("p",null,"Assume we're going to upgrade the application like below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# new-app.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: myapp\nspec:\n  components:\n    - name: express-server\n      type: webservice@v1\n      properties:\n        image: crccheck/hello-world # change the image\n")),(0,i.kt)("p",null,"Run live-diff like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"vela live-diff -f new-app.yaml -r myapp-v1\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-r")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--revision")," is a flag that specifies the name of a living ApplicationRevision with which you want to compare the updated application."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-c")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--context")," is a flag that specifies the number of lines shown around a change. The unchanged lines\nwhich are out of the context of a change will be omitted. It's useful if the diff result contains a lot of unchanged content\nwhile you just want to focus on the changed ones."),(0,i.kt)("details",null,(0,i.kt)("summary",null," Click to view the details of diff result "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'---\n# Application (myapp) has been modified(*)\n---\n  apiVersion: core.oam.dev/v1beta1\n  kind: Application\n  metadata:\n-   annotations:\n-     kubectl.kubernetes.io/last-applied-configuration: |\n-       {"apiVersion":"core.oam.dev/v1beta1","kind":"Application","metadata":{"annotations":{},"name":"myapp","namespace":"default"},"spec":{"components":[{"externalRevision":"express-server-v1","name":"express-server","properties":{"image":"stefanprodan/podinfo:4.0.3"},"type":"webservice"}]}}\n    creationTimestamp: null\n-   finalizers:\n-   - app.oam.dev/resource-tracker-finalizer\n    name: myapp\n    namespace: default\n  spec:\n    components:\n-   - externalRevision: express-server-v1\n-     name: express-server\n+   - name: express-server\n      properties:\n-       image: stefanprodan/podinfo:4.0.3\n-     type: webservice\n+       image: crccheck/hello-world\n+     type: webservice@v1\n  status:\n    rollout:\n      batchRollingState: ""\n      currentBatch: 0\n      lastTargetAppRevision: ""\n      rollingState: ""\n      upgradedReadyReplicas: 0\n      upgradedReplicas: 0\n\n---\n## Component (express-server) has been modified(*)\n---\n  apiVersion: apps/v1\n  kind: Deployment\n  metadata:\n-   annotations:\n-     kubectl.kubernetes.io/last-applied-configuration: |\n-       {"apiVersion":"core.oam.dev/v1beta1","kind":"Application","metadata":{"annotations":{},"name":"myapp","namespace":"default"},"spec":{"components":[{"externalRevision":"express-server-v1","name":"express-server","properties":{"image":"stefanprodan/podinfo:4.0.3"},"type":"webservice"}]}}\n+   annotations: {}\n    labels:\n      app.oam.dev/appRevision: ""\n      app.oam.dev/component: express-server\n      app.oam.dev/name: myapp\n      app.oam.dev/resourceType: WORKLOAD\n-     workload.oam.dev/type: webservice\n+     workload.oam.dev/type: webservice-v1\n    name: express-server\n    namespace: default\n  spec:\n    selector:\n      matchLabels:\n        app.oam.dev/component: express-server\n    template:\n      metadata:\n        labels:\n          app.oam.dev/component: express-server\n          app.oam.dev/revision: KUBEVELA_COMPONENT_REVISION_PLACEHOLDER\n      spec:\n        containers:\n-       - image: stefanprodan/podinfo:4.0.3\n+       - image: crccheck/hello-world\n          name: express-server\n          ports:\n          - containerPort: 80\n'))),(0,i.kt)("p",null,"VelaUX uses database for version record, we also recommend you to use a database instead of relying on Kubernetes etcd for versioning."))}c.isMDXComponent=!0}}]);