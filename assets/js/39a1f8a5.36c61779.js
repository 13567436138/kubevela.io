(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[34844],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=i,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58943:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return s}});var r=n(22122),i=n(19756),a=(n(67294),n(3905)),o={title:"Core Concept"},l={unversionedId:"getting-started/core-concept",id:"version-v1.3/getting-started/core-concept",isDocsHomePage:!1,title:"Core Concept",description:'KubeVela revolves around cloud-native application delivery and management scenarios. The application delivery model behind it is Open Application Model, or OAM for short. It describes various components and operational traits required for application as a unified, and infrastructure-independent "deployment plan". As a result, we can achieve standardized and efficient application delivery in a multi-cloud/hybrid-cloud environment. KubeVela includes the following core concepts:',source:"@site/versioned_docs/version-v1.3/getting-started/core-concept.md",sourceDirName:"getting-started",slug:"/getting-started/core-concept",permalink:"/docs/getting-started/core-concept",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/getting-started/core-concept.md",version:"v1.3",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1649421307,formattedLastUpdatedAt:"4/8/2022",frontMatter:{title:"Core Concept"},sidebar:"version-v1.3/docs",previous:{title:"Initialize/Destroy Environment",permalink:"/docs/case-studies/initialize-env"},next:{title:"Architecture",permalink:"/docs/getting-started/architecture"}},c=[{value:"Application",id:"application",children:[{value:"Component",id:"component",children:[]},{value:"Trait",id:"trait",children:[]},{value:"Workflow",id:"workflow",children:[]},{value:"Policy",id:"policy",children:[]}]},{value:"Cluster",id:"cluster",children:[]},{value:"Addon",id:"addon",children:[]},{value:"Next Step",id:"next-step",children:[]}],p={toc:c};function s(e){var t=e.components,o=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"KubeVela revolves around cloud-native application delivery and management scenarios. The application delivery model behind it is ",(0,a.kt)("a",{parentName:"p",href:"../platform-engineers/oam/oam-model"},"Open Application Model"),', or OAM for short. It describes various components and operational traits required for application as a unified, and infrastructure-independent "deployment plan". As a result, we can achieve standardized and efficient application delivery in a multi-cloud/hybrid-cloud environment. KubeVela includes the following core concepts:'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"alt",src:n(70960).Z})),(0,a.kt)("h2",{id:"application"},"Application"),(0,a.kt)("p",null,"An application defines the delivery and management requirements of an artifact (binary, Docker image, Helm Chart...) or cloud service included in a microservice business unit. It consists of four parts: ",(0,a.kt)("a",{parentName:"p",href:"#component"},"Component"),", ",(0,a.kt)("a",{parentName:"p",href:"#trait"},"Trait"),", ",(0,a.kt)("a",{parentName:"p",href:"#workflow"},"Workflow")," and ",(0,a.kt)("a",{parentName:"p",href:"#policy"},"Policy"),"."),(0,a.kt)("h3",{id:"component"},"Component"),(0,a.kt)("p",null,"Component defines the artifact of application\uff0cThe best practice is to having one core component and subordinate components around it. Its type decided by ",(0,a.kt)("a",{parentName:"p",href:"../platform-engineers/oam/x-definition#componentdefinition"},"Component Definition")," ."),(0,a.kt)("h3",{id:"trait"},"Trait"),(0,a.kt)("p",null,"Traits are plugable operations that can attach to Component, for example: scaler for replicas(manual and auto), PVC, gateway, DNS and so on. You can draw out-of-box Trait from the ecosystem or simply customize by ",(0,a.kt)("a",{parentName:"p",href:"../platform-engineers/oam/x-definition#traitdefinition"},"Trait Definition"),"."),(0,a.kt)("h3",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,"Workflow allows you to define critical step in the process of application delivery, typical steps will be manual approve, data passing, release across multi-cluster, notification and etc. Its type can be defined and customized by ",(0,a.kt)("a",{parentName:"p",href:"../platform-engineers/oam/x-definition#workflowstepdefinition"},"Workflow Step Definition"),"."),(0,a.kt)("h3",{id:"policy"},"Policy"),(0,a.kt)("p",null,"Policy defines a strategy of certain aspect for application as to quality assurance, security, firewall rules, SLO and etc. Its type can be defined and customized by ",(0,a.kt)("a",{parentName:"p",href:"../platform-engineers/oam/x-definition#policydefinition"},"Policy Definition"),"."),(0,a.kt)("h2",{id:"cluster"},"Cluster"),(0,a.kt)("p",null,"Import and manage your Kubernetes cluster in KubeVela\u3002Kubernetes cluster is one of the main way for KubeVela application delivery."),(0,a.kt)("h2",{id:"addon"},"Addon"),(0,a.kt)("p",null,"Addon is where you can freely pull in third-party capability that fulfills your need. This relies on the highly scalable design pattern of KubeVela. Each Addon will have its own ",(0,a.kt)("a",{parentName:"p",href:"../platform-engineers/oam/x-definition"},"X-Definition"),"."),(0,a.kt)("h2",{id:"next-step"},"Next Step"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"View ",(0,a.kt)("a",{parentName:"li",href:"./architecture"},"Architecture")," to learn the overall architecture of KubeVela."),(0,a.kt)("li",{parentName:"ul"},"View ",(0,a.kt)("a",{parentName:"li",href:"../end-user/quick-start-cli"},"Getting Started docs")," to look on more of what you can achieve with KubeVela."),(0,a.kt)("li",{parentName:"ul"},"View ",(0,a.kt)("a",{parentName:"li",href:"../end-user/components/helm"},"How To guides")," to check out more features.")))}s.isMDXComponent=!0},70960:function(e,t,n){"use strict";t.Z=n.p+"assets/images/oam-concept-a728e9c85620304a177f0a2d0656233b.jpg"}}]);