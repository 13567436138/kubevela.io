(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[37342],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,b=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(b,o(o({ref:n},l),{},{components:t})):r.createElement(b,o({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},98234:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return l}});var r=t(22122),a=t(19756),i=(t(67294),t(3905)),o={title:"Binding Configuration and Secrets"},s={unversionedId:"end-user/traits/service-binding",id:"version-v1.3/end-user/traits/service-binding",isDocsHomePage:!1,title:"Binding Configuration and Secrets",description:"Service binding trait will bind data from Kubernetes Secret to the application container's ENV.",source:"@site/versioned_docs/version-v1.3/end-user/traits/service-binding.md",sourceDirName:"end-user/traits",slug:"/end-user/traits/service-binding",permalink:"/docs/end-user/traits/service-binding",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/end-user/traits/service-binding.md",version:"v1.3",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1649421307,formattedLastUpdatedAt:"4/8/2022",frontMatter:{title:"Binding Configuration and Secrets"},sidebar:"version-v1.3/docs",previous:{title:"Rollout",permalink:"/docs/end-user/traits/rollout"},next:{title:"Attaching Sidecar",permalink:"/docs/end-user/traits/sidecar"}},p=[{value:"How to use",id:"how-to-use",children:[]}],c={toc:p};function l(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Service binding trait will bind data from Kubernetes ",(0,i.kt)("inlineCode",{parentName:"p"},"Secret")," to the application container's ENV."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"service-binding")," trait is hidden by default in ",(0,i.kt)("inlineCode",{parentName:"p"},"VelaUX"),", you can use it in CLI.")),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Prepare a Kubernetes Secret")),(0,i.kt)("p",null,"The secret can be manually created, or generated by other component or external system."),(0,i.kt)("p",null,"For example, we have a secret ",(0,i.kt)("inlineCode",{parentName:"p"},"db-conn-example")," whose data is as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"endpoint: https://xxx.com\npassword: 123\nusername: myname\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Bind the Secret into your component by ",(0,i.kt)("inlineCode",{parentName:"li"},"service-binding")," trait")),(0,i.kt)("p",null,"For example, we have a webservice component who needs to consume a database. The database connection string should be set\nto Pod environments: ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoint"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DB_PASSWORD"),"."),(0,i.kt)("p",null,"We can set the properties for envMappings as below. For each environment, ",(0,i.kt)("inlineCode",{parentName:"p"},"secret")," represents the secret name, and ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),"\nrepresents the key of the secret."),(0,i.kt)("p",null,"Here is the complete properties for the trait."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"traits:\n- type: service-binding\n  properties:\n    envMappings:\n      DB_PASSWORD:\n        secret: db-conn-example\n        key: password            \n      endpoint:\n        secret: db-conn-example\n        key: endpoint\n      username:\n        secret: db-conn-example\n        key: username\n")),(0,i.kt)("p",null,"In particular, if the environment name, like ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoint"),", is same to the ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," of the secret, we can omit the ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),".\nSo we can simplify the properties as below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"traits:\n- type: service-binding\n  properties:\n    envMappings:\n      DB_PASSWORD:\n        secret: db-conn-example\n        key: password            \n      endpoint:\n        secret: db-conn-example\n      username:\n        secret: db-conn-example\n")),(0,i.kt)("p",null,"We can finally prepare an Application for the business component ",(0,i.kt)("inlineCode",{parentName:"p"},"binding-test-comp")," to consume the secret, which is a\nrepresentative of a database cloud resource."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: webapp\nspec:\n  components:\n    - name: binding-test-comp\n      type: webservice\n      properties:\n        image: zzxwill/flask-web-application:v0.3.1-crossplane\n        ports: 80\n      traits:\n        - type: service-binding\n          properties:\n            envMappings:\n              # environments refer to db-conn secret\n              DB_PASSWORD:\n                secret: db-conn-example\n                key: password            \n              endpoint:\n                secret: db-conn-example\n              username:\n                secret: db-conn-example\n")),(0,i.kt)("p",null,"Deploy this YAML and the Secret ",(0,i.kt)("inlineCode",{parentName:"p"},"db-conn-example")," will be binding into environment of workload."))}l.isMDXComponent=!0}}]);