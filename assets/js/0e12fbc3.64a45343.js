(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[34346],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),g=a,u=d["".concat(p,".").concat(g)]||d[g]||m[g]||l;return n?r.createElement(u,o(o({ref:t},s),{},{components:n})):r.createElement(u,o({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11627:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return p},default:function(){return s}});var r=n(22122),a=n(19756),l=(n(67294),n(3905)),o={title:"Built-in Policy Type"},i={unversionedId:"end-user/policies/references",id:"version-v1.3/end-user/policies/references",isDocsHomePage:!1,title:"Built-in Policy Type",description:"This documentation will walk through the built-in policies.",source:"@site/versioned_docs/version-v1.3/end-user/policies/references.md",sourceDirName:"end-user/policies",slug:"/end-user/policies/references",permalink:"/docs/end-user/policies/references",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/end-user/policies/references.md",version:"v1.3",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1649421307,formattedLastUpdatedAt:"4/8/2022",frontMatter:{title:"Built-in Policy Type"},sidebar:"version-v1.3/docs",previous:{title:"Built-in Trait Type",permalink:"/docs/end-user/traits/references"},next:{title:"Built-in Workflow Steps",permalink:"/docs/end-user/workflow/built-in-workflow-defs"}},p=[{value:"apply-once",id:"apply-once",children:[{value:"Overview",id:"overview",children:[]},{value:"Parameter",id:"parameter",children:[]},{value:"Example",id:"example",children:[]}]},{value:"garbage-collect",id:"garbage-collect",children:[{value:"Overview",id:"overview-1",children:[]},{value:"Parameter",id:"parameter-1",children:[]},{value:"Example",id:"example-1",children:[]}]},{value:"Override",id:"override",children:[{value:"Overview",id:"overview-2",children:[]},{value:"Parameter",id:"parameter-2",children:[]},{value:"Examples",id:"examples",children:[]}]},{value:"topology",id:"topology",children:[{value:"Overview",id:"overview-3",children:[]},{value:"Parameter",id:"parameter-3",children:[]},{value:"Example",id:"example-2",children:[]}]}],c={toc:p};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This documentation will walk through the built-in policies."),(0,l.kt)("h2",{id:"apply-once"},"apply-once"),(0,l.kt)("h3",{id:"overview"},"Overview"),(0,l.kt)("p",null,"Allow configuration drift for applied resources."),(0,l.kt)("h3",{id:"parameter"},"Parameter"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"enable"),(0,l.kt)("td",{parentName:"tr",align:"center"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, allow configuration drift.")))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: apply-once-app\nspec:\n  components:\n    - name: hello-world\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n      traits:\n        - type: scaler\n          properties:\n            replicas: 1\n  policies:\n    - name: apply-once\n      type: apply-once\n      properties:\n        enable: true\n")),(0,l.kt)("h2",{id:"garbage-collect"},"garbage-collect"),(0,l.kt)("h3",{id:"overview-1"},"Overview"),(0,l.kt)("p",null,"Configure the garbage collection behaviour for the application."),(0,l.kt)("h3",{id:"parameter-1"},"Parameter"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"keepLegacyResource"),(0,l.kt)("td",{parentName:"tr",align:"center"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, outdated versioned resourcetracker will not be recycled automatically. Outdated resources will be kept until resourcetracker be deleted manually.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"rules"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]GarbageCollectPolicyRule"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of rules to control gc strategy at resource level, if one resource is controlled by multiple rules, first rule will be used.")))),(0,l.kt)("h4",{id:"garbagecollectpolicyrule"},"GarbageCollectPolicyRule"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"selector"),(0,l.kt)("td",{parentName:"tr",align:"center"},"GarbageCollectPolicyRuleSelector"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Select the target resources of the rule.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"strategy"),(0,l.kt)("td",{parentName:"tr",align:"center"},"String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The strategy for target resources to recycle. Available values: never, onAppDelete, onAppUpdate.")))),(0,l.kt)("h4",{id:"garbagecollectpolicyruleselector"},"GarbageCollectPolicyRuleSelector"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"componentNames"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Select target resources by component names.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"componentTypes"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Select target resources by component types.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"traitTypes"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Select target resources by trait types.")))),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: first-vela-app\nspec:\n  components:\n    - name: express-server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: ingress-1-20\n          properties:\n            domain: testsvc.example.com\n            http:\n              "/": 8000\n  policies:\n    - name: keep-legacy-resource\n      type: garbage-collect\n      properties:\n        keepLegacyResource: true\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: garbage-collect-app\nspec:\n  components:\n    - name: hello-world-new\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n      traits:\n        - type: expose\n          properties:\n            port: [8000]\n  policies:\n    - name: garbage-collect\n      type: garbage-collect\n      properties:\n        rules:\n          - selector:\n              traitTypes:\n                - expose\n            strategy: onAppDelete\n")),(0,l.kt)("h2",{id:"override"},"Override"),(0,l.kt)("h3",{id:"overview-2"},"Overview"),(0,l.kt)("p",null,"Describe the configuration to override when deploying resources."),(0,l.kt)("h3",{id:"parameter-2"},"Parameter"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"components"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]ComponentPatch"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of component configurations to override.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"selector"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of component names to use. If not set, all components will be used.")))),(0,l.kt)("h4",{id:"componentpatch"},"ComponentPatch"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"name"),(0,l.kt)("td",{parentName:"tr",align:"center"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The name of the component to override. If not set, it will match all components with the specified type. Can be used with wildcard * for fuzzy match.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"type"),(0,l.kt)("td",{parentName:"tr",align:"center"},"String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the component to override. If not set, all component types will be matched.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"properties"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Object"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The component properties to merge.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"traits"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]TraitPatch"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of trait configurations to override.")))),(0,l.kt)("h4",{id:"traitpatch"},"TraitPatch"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"type"),(0,l.kt)("td",{parentName:"tr",align:"center"},"String"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the trait to override.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"properties"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Object"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The trait properties to merge.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"disable"),(0,l.kt)("td",{parentName:"tr",align:"center"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If trait, this trait will be removed.")))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: deploy-with-override\n  namespace: examples\nspec:\n  components:\n    - name: nginx-with-override\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n    - name: override-nginx-legacy-image\n      type: override\n      properties:\n        components:\n          - name: nginx-with-override\n            properties:\n              image: nginx:1.20\n    - name: override-high-availability\n      type: override\n      properties:\n        components:\n          - type: webservice\n            traits:\n              - type: scaler\n                properties:\n                  replicas: 3\n  workflow:\n    steps:\n      - type: deploy\n        name: deploy-local\n        properties:\n          policies: ["topology-local"]\n      - type: deploy\n        name: deploy-hangzhou\n        properties:\n          policies: ["topology-hangzhou-clusters", "override-nginx-legacy-image", "override-high-availability"]\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: advance-override\n  namespace: examples\nspec:\n  components:\n    - name: nginx-advance-override-legacy\n      type: webservice\n      properties:\n        image: nginx:1.20\n    - name: nginx-advance-override-latest\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n    - name: override-nginx-legacy\n      type: override\n      properties:\n        selector: ["nginx-advance-override-legacy"]\n    - name: override-nginx-latest\n      type: override\n      properties:\n        selector: ["nginx-advance-override-latest", "nginx-advance-override-stable"]\n        components:\n          - name: nginx-advance-override-stable\n            type: webservice\n            properties:\n              image: nginx:stable\n  workflow:\n    steps:\n      - type: deploy\n        name: deploy-local\n        properties:\n          policies: ["topology-local", "override-nginx-legacy"]\n      - type: deploy\n        name: deploy-hangzhou\n        properties:\n          policies: ["topology-hangzhou-clusters", "override-nginx-latest"]\n')),(0,l.kt)("h2",{id:"topology"},"topology"),(0,l.kt)("h3",{id:"overview-3"},"Overview"),(0,l.kt)("p",null,"Describe the destination where components should be deployed to."),(0,l.kt)("h3",{id:"parameter-3"},"Parameter"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"clusters"),(0,l.kt)("td",{parentName:"tr",align:"center"},"[]string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The names of the clusters to select.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"clusterLabelSelector"),(0,l.kt)("td",{parentName:"tr",align:"center"},"mpa","[string]","string"),(0,l.kt)("td",{parentName:"tr",align:"left"},'The label selector for clusters. Exclusive to "clusters"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"namespace"),(0,l.kt)("td",{parentName:"tr",align:"center"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The target namespace to deploy in the selected clusters. If not set, components will inherit the original namespace.")))),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: basic-topology\n  namespace: examples\nspec:\n  components:\n    - name: nginx-basic\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusters: ["hangzhou-1", "hangzhou-2"]\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: label-selector-topology\n  namespace: examples\nspec:\n  components:\n    - name: nginx-label-selector\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-hangzhou-clusters\n      type: topology\n      properties:\n        clusterLabelSelector:\n          region: hangzhou\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: local-ns-topology\n  namespace: examples\nspec:\n  components:\n    - name: nginx-local-ns\n      type: webservice\n      properties:\n        image: nginx\n  policies:\n    - name: topology-local\n      type: topology\n      properties:\n        clusters: ["local"]\n        namespace: examples-alternative\n')))}s.isMDXComponent=!0}}]);